openapi: 3.0.4
info:
  title: PartnerHub API
  description: REST API for managing users and external projects
  version: v1
servers:
  - url: http://localhost:8080
    description: Generated server url
security:
  - basicAuth: []
tags:
  - name: Users
    description: Endpoints for managing users
  - name: Users Async
    description: Endpoints for async user operations via Kafka and Redis
  - name: External Projects
    description: Endpoints for managing user's external projects
  - name: Thread
    description: Thread information endpoints
paths:
  /api/users/{userId}/projects/{projectId}:
    put:
      tags:
        - External Projects
      summary: Update a user's external project
      description: Updates an existing project by user ID and project ID
      operationId: updateProject
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
          example: 1
        - name: projectId
          in: path
          description: ID of the project to update
          required: true
          schema:
            type: string
          example: proj-001
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExternalProjectUpdateRequestDTO"
        required: true
      responses:
        "200":
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalProjectResponseDTO"
              example:
                id: proj-001
                name: Partner API v2
                createdAt: 2024-01-15T10:00:00Z
                updatedAt: 2024-06-15T10:10:00Z
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 400
                error: Bad Request
                errors:
                  - field: name
                    message: Project name must not be blank
                    rejectedValue: ""
                path: /api/users/1/projects/proj-001
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 401
                error: Unauthorized
                message: Full authentication is required to access this resource
                path: /api/users/1/projects/proj-001
        "404":
          description: Project or user not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 404
                error: Not Found
                message: Project with ID proj-001 or user with ID 1 not found
                path: /api/users/1/projects/proj-001
  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Returns the user that matches the given ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: ID of the user to retrieve
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
              example:
                id: 42
                email: john.doe@example.com
                name: John Doe
                createdAt: 2024-01-15T10:00:00Z
                updatedAt: 2024-06-14T14:32:00Z
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 404
                error: Not Found
                message: User with ID 42 not found
                path: /api/users/42
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 401
                error: Unauthorized
                message: Full authentication is required to access this resource
                path: /api/users/42
    put:
      tags:
        - Users
      summary: Update user by ID
      description: Updates a user's name or email using the provided data
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequestDTO"
        required: true
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
              example:
                id: 42
                email: john.doe@example.com
                name: John Doe
                createdAt: 2024-01-15T10:00:00Z
                updatedAt: 2024-06-14T14:32:00Z
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 400
                error: Bad Request
                errors:
                  - field: name
                    message: Name must not be blank
                    rejectedValue: ""
                path: /api/users/42
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 404
                error: Not Found
                message: User with ID 42 not found
                path: /api/users/42
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 401
                error: Unauthorized
                message: Full authentication is required to access this resource
                path: /api/users/42
    delete:
      tags:
        - Users
      summary: Delete user by ID
      description: Deletes the user associated with the given ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID of the user to delete
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        "204":
          description: User deleted
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 404
                error: Not Found
                message: User with ID 42 not found
                path: /api/users/42
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 401
                error: Unauthorized
                message: Full authentication is required to access this resource
                path: /api/users/42
  /api/users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Returns a list of all registered users
      operationId: getAllUsers
      responses:
        "200":
          description: Users retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 401
                error: Unauthorized
                message: Full authentication is required to access this resource
                path: /api/users
    post:
      tags:
        - Users
      summary: Create a new user
      description: "Creates a user using the provided email, password, and name"
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequestDTO"
        required: true
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
              example:
                id: 42
                email: john.doe@example.com
                name: John Doe
                createdAt: 2024-01-15T10:00:00Z
                updatedAt: 2024-06-14T14:32:00Z
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 400
                error: Bad Request
                errors:
                  - field: email
                    message: Email must be valid
                    rejectedValue: invalid
                path: /api/users
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 401
                error: Unauthorized
                message: Full authentication is required to access this resource
                path: /api/users
  /api/users/{userId}/projects:
    get:
      tags:
        - External Projects
      summary: Get all external projects of a user
      description: Returns a list of projects associated with the specified user
      operationId: getProjectsByUser
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        "200":
          description: List of projects returned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalProjectResponseDTO"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 401
                error: Unauthorized
                message: Full authentication is required to access this resource
                path: /api/users/1/projects
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 404
                error: Not Found
                message: User with ID 1 not found
                path: /api/users/1/projects
    post:
      tags:
        - External Projects
      summary: Add a new external project to a user
      description: Creates a new project and links it to the specified user
      operationId: addProject
      parameters:
        - name: userId
          in: path
          description: ID of the user to associate the project with
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExternalProjectRequestDTO"
        required: true
      responses:
        "201":
          description: Project successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalProjectResponseDTO"
              example:
                id: proj-001
                name: Partner API Integration
                createdAt: 2024-01-15T10:00:00Z
                updatedAt: 2024-06-14T14:32:00Z
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 400
                error: Bad Request
                errors:
                  - field: id
                    message: Project ID must not be blank
                    rejectedValue: ""
                path: /api/users/1/projects
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 401
                error: Unauthorized
                message: Full authentication is required to access this resource
                path: /api/users/1/projects
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-15T17:02:00.000+00:00
                status: 404
                error: Not Found
                message: User with ID 1 not found
                path: /api/users/1/projects
        "409":
          description: Project already exists for this user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-16T20:10:00.000+00:00
                status: 409
                error: Conflict
                message: Project with ID proj-001 already exists for user with ID 1
                path: /api/users/1/projects
  /api/users/async/kafka:
    post:
      tags:
        - Users Async
      summary: Create user asynchronously
      description: Publishes a user creation request to Kafka. The status of this request can be checked with the requestId using the status endpoint.
      operationId: createUserAsyncViaKafka
      requestBody:
        description: User creation information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequestDTO"
            example:
              email: john.doe@example.com
              password: MySecurePass123
              name: John Doe
      responses:
        "202":
          description: User creation request accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: PENDING
                  requestId:
                    type: string
                    example: "f1234567-8abc-4def-9eef-123456789abc"
              example:
                status: PENDING
                requestId: f1234567-8abc-4def-9eef-123456789abc
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-17T12:00:00.000+00:00
                status: 400
                error: Bad Request
                message: Email must be valid
                path: /api/users/async/kafka
  /api/users/async/kafka/status/{requestId}:
    get:
      tags:
        - Users Async
      summary: Check status of async user creation
      description: Retrieves the processing status (PENDING, SUCCESS, FAILED) of a user creation request by its requestId.
      operationId: getAsyncUserCreationStatus
      parameters:
        - name: requestId
          in: path
          description: ID of the async user creation request to check
          required: true
          schema:
            type: string
            example: "f1234567-8abc-4def-9eef-123456789abc"
      responses:
        "200":
          description: Status found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: SUCCESS
              example:
                status: SUCCESS
        "404":
          description: Request not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDTO"
              example:
                timestamp: 2025-06-17T12:05:00.000+00:00
                status: 404
                error: Not Found
                message: No request with ID f1234567-8abc-4def-9eef-123456789abc found
                path: /api/users/async/kafka/status/f1234567-8abc-4def-9eef-123456789abc
  /thread/name:
    get:
      tags:
        - Thread
      summary: Get current thread name and info
      description: Returns the current thread name and details as a string. Useful
        for debugging and tracing thread usage in the backend.
      operationId: getThreadName
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    ExternalProjectResponseDTO:
      type: object
      description: Response payload representing an external project.
      properties:
        id:
          type: string
          description: Unique identifier of the external project
          example: proj-001
          maxLength: 200
        name:
          type: string
          description: Name of the external project
          example: Partner API Integration
          maxLength: 120
        createdAt:
          type: string
          format: date-time
          description: Date and time when the project was created
          example: 2024-01-15T10:00:00Z
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the project was last updated
          example: 2024-06-14T14:32:00Z
      required:
        - id
        - name
    ErrorResponseDTO:
      type: object
      description: Standard error response for API validation and authorization errors.
      properties:
        timestamp:
          type: string
          description: Timestamp of the error occurrence
          example: 2025-06-15T17:02:00.000+00:00
        status:
          type: integer
          format: int32
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Short description of the error
          example: Unauthorized
        message:
          type: string
          description: Detailed error message
          example: Full authentication is required to access this resource
        path:
          type: string
          description: Path of the request that generated the error
          example: /api/users
        errors:
          type: array
          description: List of field errors (for validation errors)
          items:
            $ref: "#/components/schemas/FieldError"
    FieldError:
      type: object
      description: Details about each field error in validation scenarios.
      properties:
        field:
          type: string
          description: Field with the error
          example: email
        message:
          type: string
          description: Validation message
          example: Email must be valid
        rejectedValue:
          type: string
          description: Rejected value for the field
          example: invalid@email
    ExternalProjectUpdateRequestDTO:
      type: object
      description: Payload to update the name of an existing external project.
      properties:
        name:
          type: string
          description: The new name for the external project
          example: Partner API v2
          maxLength: 120
          minLength: 0
      required:
        - name
    UserResponseDTO:
      type: object
      description: Response payload representing a user.
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the user
          example: 42
        email:
          type: string
          description: Email address of the user
          example: john.doe@example.com
          maxLength: 200
        name:
          type: string
          description: Full name of the user
          example: John Doe
          maxLength: 120
        createdAt:
          type: string
          format: date-time
          description: Date and time the user was created
          example: 2024-01-15T10:00:00Z
        updatedAt:
          type: string
          format: date-time
          description: Date and time the user was last updated
          example: 2024-06-14T14:32:00Z
      required:
        - email
        - id
    UserUpdateRequestDTO:
      type: object
      description: Payload to update a user's profile information.
      properties:
        email:
          type: string
          description: Updated email address
          example: new.email@example.com
          maxLength: 200
          minLength: 1
        name:
          type: string
          description: Updated full name
          example: New Name
          maxLength: 120
          minLength: 0
      required:
        - email
        - name
    UserRequestDTO:
      type: object
      description: Payload to create or register a new user.
      properties:
        email:
          type: string
          description: User's unique email address
          example: john.doe@example.com
          maxLength: 200
          minLength: 1
        password:
          type: string
          description: User's password (8 to 64 characters)
          example: MySecurePass123
          maxLength: 64
          minLength: 8
        name:
          type: string
          description: Full name of the user
          example: John Doe
          maxLength: 120
          minLength: 0
      required:
        - email
        - password
    ExternalProjectRequestDTO:
      type: object
      description: Payload to create a new external project for a user.
      properties:
        id:
          type: string
          description: Unique identifier for the external project
          example: proj-001
          maxLength: 200
          minLength: 0
        name:
          type: string
          description: Name of the external project
          example: Partner API Integration
          maxLength: 120
          minLength: 0
      required:
        - id
        - name
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
